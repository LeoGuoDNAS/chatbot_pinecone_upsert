<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = ".";
    gCommonRootRelPath = ".";
    gTopicId = "2.17.15.0_2";
  
//]]></script>

  <script type="text/javascript" src="./template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="./template/scripts/common.min.js"></script>
  <script type="text/javascript" src="./template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="./template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="./whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="./template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="./template/single_page/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="MS-HKWD" content="Data Bridge"/>
<meta name="MS-HKWD" content="Service Channel"/>
<meta name="MS-HKWD" content="FMMS"/>
<meta name="topic-status" content="Sent for Review"/>
<meta name="generator" content="Adobe RoboHelp 2020"/>
<title>Service Channel - Background and Setup</title>
<link rel="StyleSheet" href="assets/css/sampro.css" type="text/css"/>

<meta name="rh-index-keywords" content="Data Bridge,Service Channel,FMMS"/><meta name="brsnext" value="Registry_Service_Channel_PIN.htm"/><meta name="brsprev" value="Service_Channel_Overview.htm"/></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Service Channel - Background and Setup">
        <span>Service Channel - Background and Setup</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



<h1>Service Channel - Background and Setup</h1>
<h3>Introduction</h3>
<p>The ServiceChannelHelper class is used to implement the client side of the Service Channel FMMS system. It provides facilities for</p>
<p style="margin-left: 48px;">The posting logic for inbound messages.</p>
<p style="margin-left: 48px;">Various helper methods.</p>
<p>Contact your Data-Basics Support Representative for current installation instructions.</p>

<h3>Registry Configuration Settings</h3>
<p>See <a href="Registry_Service_Channel_sys_FMMS_.htm">Registry Service Channel (sys-FMMS)</a> for the registry settings required to support the Service Channel data bridge.</p>
<p>How Messages are Received by Sampro from ServiceChannel</p>
<p>ServiceChannel uses HTTP GET messages to send Service Request messages to its subscribers. This means that Sampro customers will need to provide some type of Web Server in order to receive these messages. Sampro includes an HTTPServer class which is used for this purpose.</p>
<p>The body of the GET message sent by ServiceChannel contains an XML encoded Service Request. Sampro needs to parse the Service Request and makes appropriate entries to the wblg table where it will be picked up via New Call.</p>
<p>The Sampro HTTPServer class is used to listen for new Service Requests and to save them in a file system folder. Here’s how it works:</p>
<p>The method FMMSServiceChannelHelper class&gt;&gt;startWebServer instantiates a HTTPServer instance and starts it listening on the port indicated in the sys-FMMS-Vendor-ServiceChannel registry entry. Port 9999 is used if this entry cannot be found.</p>
<p>When it receives a GET request, it extracts the query path (which should be ‘/FMMSServiceChannelHelper/newcall.smi’) from the request. Since the path ends in ‘.smi’, the Web Server considers the path to contain a class name and the name of a class method in that class. Accordingly, the method FMMSServiceChannel class&gt;&gt;newcall: is invoked. The contents of the GET request, encoded as a Dictionary, are passed to the newcall: method.</p>
<p>‘newcall:’ extracts the XML encoded Service Request from the GET message. It then writes the request as a new file in the InboundDocumentSourceFolder identified in the Sampro registry entry. The name of the file containing the Service Request will include the dispatch number (CALL.TR_NUM attribute) (<font style="font-style: italic;">I don’t believe this to be currently true</font>).<br/></p>
<p>Note that it would also be possible to use another web server to accomplish this same task.</p>
<p>What happens to the Service Requests after they have been written to the inbound folder is described in the Processing New Service Requests section below.</p>
<p>How Messages are Transmitted From Sampro to ServiceChannel</p>
<p>Sampro uses HTTP POST messages to send messages to ServiceChannel. The mssge table is used to queue messages to be sent. Periodically, a Sampro function will invoke the method ServiceChannelHelper &gt;&gt;scanSendQueue which will scan the mssge table looking for messages to send to ServiceChannel. It will then use the HTTPClient class to transmit the message. This process is described greater detail in a later section of this document.</p>
<p>Database Tables</p>
<p>ServiceChannelHelper relies on the following Sampro database tables</p>
<p>mssge – Used to queue messages to be sent to ServiceChannel and responses to be posted.</p>
<p>lrgeobjct – Extends mssge when long messages need to be encoded into the mssge table. Probably not required for ServiceChannel version of FMMS.</p>
<p>wblg – Used to store new dispatches for importing into New Call.</p>
<p>fmmsinfo – Contains columns used in joining dispatches, mssge rows, and Sampro Work Orders. This table is used solely so that columns do not have to be added to existing tables (which would be the preferred approach). The fmmsinfo table is discussed in detail in a separate document.</p>
<p>fmmsmppng – Used to map certain FMMS vendor field values to their corresponding Sampro values.</p>
<p style="margin-top: 0; margin-bottom: 0;"> </p>
<p>ServiceChannelHelper uses the BusinessObject class and its subclasses for all database access. The following BusinessObject subclasses are implemented:</p>
<p>DB_Message – mssge table</p>
<p>FMMSInfo – fmmsinfo table</p>
<p>FMMSMapping = fmmsmppng table</p>
<p>Weblog = wblg table</p>
<p><br/>
Processing New Service Requests (Dispatches)</p>
<p>As described above, the Data-Basics Service Provider will use a Web Server to capture HTTP GET messages send by ServiceChannel. This Web Server will create a new file for each inbound GET message. This file will contain the XML encoded Service Request obtained from the GET message. The identity of the folder into which the file will be written is defined within the Sampro Registry.</p>
<p>Periodically, a scheduled event invokes the method ‘FMMSServiceChannelHelper &gt;&gt; scanInboundFolder’. This method scans the inbound folder looking for new Service Request files. Each of these files contains a single new XML encoded Service Request.</p>
<p>For each request file encountered, the file’s XML content is converted to a Node hierarchy. The method ‘FMMSServiceChannelHelper &gt;&gt; postNewDispatchNode:’ is then used to post the Service Request. The parameter passed to this method is the Node hierarchy representing the request’s CALL element.</p>
<p>If the post is successful, the file is moved to an Archive folder. If the post is unsuccessful, the file is moved to the Reject folder. These folders are identified in the Sampro registry.</p>
<p>The following actions take place for each new Service Request:</p>
<p>A new entry in the wblg table is created. This entry will have a</p>
<p>‘wblg_dte_lggd’ and ‘wblg_tme_lggd’ are set to the current date and time.</p>
<p>‘wblg_wrk_rqstd’ set to the ‘Problem’ field from the message</p>
<p>‘wblg_ack’ set to false.</p>
<p style="margin-top: 0; margin-bottom: 0;">‘wblg_stts’ set to ‘New’ </p>
<p>‘wblg_stts_dscrptn’ set to blank</p>
<p>‘wblg_sbmttd_by’ set to ‘ServiceChannel’</p>
<p>‘wblg_rfrnce_msge_rn’ set to zero.</p>
<p>‘wblg_dte_wrk’ set to the date portion of the ‘DateTime’ field from the CALL’s ‘DATETIME’ attribute</p>
<p style="margin-top: 0; margin-bottom: 0;">‘wblg_type’ set to ‘Client’ </p>
<p>‘wblg_clntste_rn’ set to 0.<br/></p>
<p>A new entry in the fmmsinfo table will be created. This entry will have a</p>
<p>‘wblg_rn’ set to the rn of the weblog created in the prior step.</p>
<p style="margin-top: 0; margin-bottom: 0;">‘fmmsinfo_txt’ column containing the CALL Node structure represented as an XML string.. </p>
<p>‘fmmsinfo_dsptch_id’ set to the value of the CALL’s ‘TR_NUM’ attribute.</p>
<p>‘fmmsinfo_prtcl’ set to ‘ServiceChannel’</p>
<p>‘fmmsinfo_vndr: is set to ‘ServiceChannel’</p>
<p>All other columns will retain their default values.</p>
<p style="margin-top: 0; margin-bottom: 0;"> </p>
<p>Note that the ‘wblg_rn’ column of the fmmsinfo table may be used to join the wblg entry to the corresponding fmmsinfo entry. This fact can be used to determine if a wblg entry is an FMMS entry.</p>
<p style="margin-top: 0; margin-bottom: 0;"> </p>
<p>New Call Processing</p>
<p>Prior to FMMS, New Call already had a mechanism for picking up new service request from the wblg table. This method has been expanded for FMMS new calls.<br/></p>
<p>Identifying an FMMS Service Request Weblog entry<br/>
New Call uses the method weblogIsFromFMMS to determine whether it has to perform special FMMS processing when the Weblog Id field is filled in. An FMMS weblog entry is identified by checking to see if there is an fmmsinfo table row referencing the weblog’s rn.<br/></p>
<p>Processing the selection of an FMMS Weblog entry<br/>
When New Call identifies a selected weblog entry as being an FMMS entry, it invokes the method ‘doFMMSWeblogProcessing’. This method checks the FMMS protocol from the fmmsinfo_prtcl column (currently either Officetrax or ServiceChannel) and dispatches processing to a handler method in the subclass of FMMSHelper specific for that protocol. This would be either FMMSServiceChannelHelper or FMMSOfficetraxHelper.<br/>
<br/>
The FMMSServiceChannelHelper handler obtains the fmmsinfo table entry corresponding to the Weblog entry and decodes the XML string obtained from its fmmsinfo_txt column. It uses the resulting Node hierarchy to build the contents of a dialog box it displays to the user. The Dialog gives the user the option to decline the request, to ignore the request, or to proceed with the request.<br/></p>
<p>Declining the Service Request: When the user chooses to decline the request, a list dialog is displayed from which the user can pick the reason for the decline. Choices are &#39;Location Declined&#39;, &#39;Trade Declined&#39;, or &#39;Time Declined&#39;. New Call then creates a ‘ToSend’ message in the mssge table. The ‘mssge_txt’ column is set to a XML encoded string identifying the following CALL attributes:</p>
<p>TR_NUM</p>
<p>STATUS (Set to the reason of the decline)<font style="font-weight: bold;"><br/></font></p>
<p>Proceeding with the Service Request: If the user chooses to proceed with the request, processing returns to the normal New Call sequence. Before returning, however, a number of New Call fields are preset based on the properties of the Service Request.<br/>
<br/>
The presetting procedure takes prior experience into account via the fmmsmppg tble. For example, when a new Service Request for SUB ‘AAA’ and LOC ‘BBB’ (SUB and LOC are properties of the ServiceChannel CALL element identifying the retailer and a site for the retailer) is received and a prior dispatch for SUB ‘AAA’ and LOC ‘BBB’ resulted in the dispatcher selecting Site Id ‘SSSS’, New Call’s Search Text field will be automatically preset to ‘SSSS’.<br/>
<br/>
Proceeding with a Service Request does not immediately result in the queuing of an Accept message. This will not occur until a New Call actually creates a new Work Order for the Service Request (as described below).<br/></p>
<p>The following actions occur when an FMMS Weblog entry results in the creation of a new Work Order (i.e. when the user selects the Add button on the New Call screen). These actions are implemented by NewCall methods.</p>
<p>‘doFMMSAttachNoteToWorkorder’ attaches a note to the Work Order containing the details of the Service Request. This is the same information as appears in the dialog box described above.</p>
<p>‘doFMMSUpdateFMMSInfo’ updates the fmminfo record for the Service Request with the new Work Order’s wrkordr_rn value. This identifies the Work Order associated with the Service Request.</p>
<p>‘doFMMSUpdateFMMSMappingForServiceChannel’ records any ServiceChannel / Sampro value mappings in the fmmsmppng table.</p>
<p>‘doFMMSQueueAcceptMessageForServiceChannel’ queues an acceptance message by adding a ‘ToSend’ entry to the mssge table. The ‘mssge_txt’ column is set to an XML encoded string identifying the following CALL attributes:</p>
<p>TR_NUM</p>
<p>STATUS (set to &#39;DISPATCH_CONFIRMED&#39;)</p>
<p>WO_NUM (set to the id of the newly created Work Order</p>
<p>&#39;SCHED_DATETIME&#39; (set to the date and time the work is scheduled to be performed.</p>
<p style="margin-top: 0; margin-bottom: 0;"> </p>
<p>Uploading Proposals to ServiceChannel</p>
<p>To upload a Proposal to ServiceChannel, create a Sampro Quote referencing the Work Order and press the ‘Upload to ServiceChannel’ button on the Quote’s parent form. If you want to include previously incurred charges on the quote, make sure you enter them on the Work Order before uploading the Quote.</p>
<p>Processing ServiceChannel Generated Check-ins and Check-outs</p>
<p>ServiceChannel provides a mechanism through which a Technician can check in or check out of a Work Order. This is provided by their telephone Interactive Voice Response (IVR) system.<br/>
<br/>
When a Technician checks in or out, ServiceChannel sends an appropriate message to the Data Bridge which then updates the Work Order accordingly.</p>
<p>Notifying ServiceChannel of Work Order Status and ETA Changes</p>
<p>Whenever a Work Order is changed, the method ‘FMMSHelper class&gt;&gt;checkStatusChangeFrom:To:workorderId’ is invoked. Subsequent processing determines if the Work Order’s status has changed and, if so, queues a POST request in the mssge table to notify ServiceChannel of this change.</p>
<p>Whenever a Work Order’s ETA changes, the method ‘FMMSHelper class&gt;&gt; queueChangeETAForWorkorder:eta:’ is invoked. Subsequent processing queues a POST request in the mssge table to notify ServiceChannel of this change.</p>
<p>Notifying ServiceChannel of Generated Invoices</p>
<p>Periodically a function invoking the method ‘FMMSHelper&gt;&gt;queueInvoices’ is run. This method identifies Sampro invoices that have not previously been sent to ServiceChannel. The method ‘FMMSHelper class&gt;&gt; queueAddInvoice:’ is invoked for each such invoice.</p>
<p>The ‘queueAddInvoice:’ method encodes the invoice as a series of comma delimited lines which it forwards to ServiceChannel as an attachment to an email message.</p>
<p>Queuing Outbound HTTP POST Requests</p>
<p>A ‘FMMSServiceChannel&gt;&gt;queueSendRequestForCall:’ method has been created for the purpose of queuing outbound HTTP Post messages based on the CALL XML element. The argument to the method is a Dictionary containing the values of all the attributes for the CALL elements to be included in the outbound CALL message.</p>
<p>This method simply makes an entry in the mssge table including all information necessary to send the request.</p>
<p>The ‘mssge_stts’ column will be set to ‘ToSend</p>
<p>The ‘mssge_txt’ column will be set to XML for the CALL element.</p>
<p>The ‘mssge_type’ column will be set to ‘FMMSServiceChannel’</p>
<p>The ‘mssge_sbmittd_by’ column will be set to ‘FMMS’</p>
<p>The ‘mssge_actn’ column will be set to a ‘Call’</p>
<p style="margin-top: 0; margin-bottom: 0;"> </p>
<p>Sending the Queued Outbound HTTP POST Reqeusts</p>
<p>Periodically, a Scheduled Event invokes the FMMSServiceChannelHelper&gt;&gt; scanSendQueue method which scans the mssge table and uses the HTTPClient class to send an appropriate POST message to ServiceChannel. The internet addressing and authentication information for the message is obtained from the Sampro registry. The payload of the post is taken from the mssge record’s mssge_txt column.</p>
<p style="margin-top: 0; margin-bottom: 0;"> </p>
<p>Summary of Processing Sequence:</p>
<p>Receiving new Service Reqeusts</p>
<p>A Web Severer which listens for inbound requests on a specific port is started.</p>
<p>ServiceChannel issues a GET request to the port. The query parameter is in the form ‘XMLString=&lt;an XML string&gt;. The XML string encodes a node hierarchy which includes a &lt;CALL&gt; node. The &lt;CALL&gt; node contains the new service request.</p>
<p>The Web Server extracts the XML String and writes it to a file in the Inbound folder identified in the Registry. This task is performed by the ‘newcall:’ method. ‘newcall:’ instructs the Web Server to respond with the simple string ‘1’.</p>
<p>Periodically, a task scans the inbound folder and passes the corresponding &lt;CALL&gt; node hierarchy to FMMSServiceChannelHelper.</p>
<p>The appropriate data is extracted from the hierarchy and written to the Weblog and the FMMSInfo tables<br/></p>
<p>New Call Processing</p>
<p>The user double clicks on the Weblog field and picks an FMMS weblog entry.</p>
<p>The appropriate data is fetched from the Weblog and FMMSInfo tables. It is formatted and displayed for inspection by the dispatcher.</p>
<p>The dispatcher either accepts or declines the service request.</p>
<p>If the user declines the request, a Decline message us queued in the Message table with a status of ‘ToSend’. New Call is then re-initialized.</p>
<p>If the user accepts the request, New Call resumes with certain fields defaulted from the request contents. If the user then continues in New Call and creates a Work Order, an Accept message is queued in the Message Table with a status of ‘ToSend’. New Call is then re-initialized.<br/></p>
<p>Message Queue Processing</p>
<p>New Call queues Accept or Reject message requests in the Message table.</p>
<p>Periodically a task scans the Message table looking for messages to send.</p>
<p>When a message is found, a corresponding POST is constructed and sent to ServiceChannel via an HTTPClient. The HTTP Client is instructed to invoke HTTPResponseReceived: when the response to the message is received.</p>
<p>HTTPResponsedReceived: queues a new message in the mssge table with a status of ‘PostPending’. This message encodes the response received and the rn of the initiating message. The originating message is then stamped with a status of ‘Posted’.</p>
<p>Periodically, a task invokes the ‘FMMSServiceChannelHelper&gt;&gt;scanPostQueue’ method which scans the Message Table looking ‘PostPending’ messages to post. It invokes the method ‘postResponseMessage:’ for each response to post. Currently, ‘postResponseMessage:’ simply marks the message as posted.</p>

</body></html>